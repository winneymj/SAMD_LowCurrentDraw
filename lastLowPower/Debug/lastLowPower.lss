
lastLowPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  2000000c  00000be0  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000048  00000c1c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012794  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d9e  00000000  00000000  00032821  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000290  00000000  00000000  000345bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000250  00000000  00000000  0003484f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000162c0  00000000  00000000  00034a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000064f3  00000000  00000000  0004ad5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00080734  00000000  00000000  00051252  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000005e4  00000000  00000000  000d1988  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001d5b  00000000  00000000  000d1f6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	48 20 00 20 3d 08 00 00 39 08 00 00 39 08 00 00     H . =...9...9...
	...
  2c:	39 08 00 00 00 00 00 00 00 00 00 00 39 08 00 00     9...........9...
  3c:	39 08 00 00 39 08 00 00 39 08 00 00 39 08 00 00     9...9...9...9...
  4c:	39 08 00 00 39 08 00 00 39 08 00 00 39 08 00 00     9...9...9...9...
  5c:	39 08 00 00 39 08 00 00 39 08 00 00 39 08 00 00     9...9...9...9...
  6c:	39 08 00 00 39 08 00 00 00 00 00 00 00 00 00 00     9...9...........
  7c:	39 08 00 00 39 08 00 00 39 08 00 00 39 08 00 00     9...9...9...9...
  8c:	39 08 00 00 39 08 00 00 00 00 00 00 00 00 00 00     9...9...........
  9c:	39 08 00 00 39 08 00 00 39 08 00 00 39 08 00 00     9...9...9...9...
  ac:	39 08 00 00 00 00 00 00                             9.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	2000000c 	.word	0x2000000c
  d4:	00000000 	.word	0x00000000
  d8:	00000bd4 	.word	0x00000bd4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000010 	.word	0x20000010
 108:	00000bd4 	.word	0x00000bd4
 10c:	00000bd4 	.word	0x00000bd4
 110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
 114:	4770      	bx	lr
	...

00000118 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
 118:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
 11a:	2000      	movs	r0, #0
 11c:	4b08      	ldr	r3, [pc, #32]	; (140 <delay_init+0x28>)
 11e:	4798      	blx	r3
 120:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
 122:	4c08      	ldr	r4, [pc, #32]	; (144 <delay_init+0x2c>)
 124:	21fa      	movs	r1, #250	; 0xfa
 126:	0089      	lsls	r1, r1, #2
 128:	47a0      	blx	r4
 12a:	4b07      	ldr	r3, [pc, #28]	; (148 <delay_init+0x30>)
 12c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
 12e:	4907      	ldr	r1, [pc, #28]	; (14c <delay_init+0x34>)
 130:	0028      	movs	r0, r5
 132:	47a0      	blx	r4
 134:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x38>)
 136:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 138:	2205      	movs	r2, #5
 13a:	4b06      	ldr	r3, [pc, #24]	; (154 <delay_init+0x3c>)
 13c:	601a      	str	r2, [r3, #0]
}
 13e:	bd70      	pop	{r4, r5, r6, pc}
 140:	000005f9 	.word	0x000005f9
 144:	00000a0d 	.word	0x00000a0d
 148:	20000000 	.word	0x20000000
 14c:	000f4240 	.word	0x000f4240
 150:	20000004 	.word	0x20000004
 154:	e000e010 	.word	0xe000e010

00000158 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
 158:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
 15a:	4b08      	ldr	r3, [pc, #32]	; (17c <delay_cycles_ms+0x24>)
 15c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
 15e:	4a08      	ldr	r2, [pc, #32]	; (180 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
 160:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 162:	2180      	movs	r1, #128	; 0x80
 164:	0249      	lsls	r1, r1, #9
	while (n--) {
 166:	3801      	subs	r0, #1
 168:	d307      	bcc.n	17a <delay_cycles_ms+0x22>
	if (n > 0) {
 16a:	2c00      	cmp	r4, #0
 16c:	d0fb      	beq.n	166 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
 16e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 170:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 172:	6813      	ldr	r3, [r2, #0]
 174:	420b      	tst	r3, r1
 176:	d0fc      	beq.n	172 <delay_cycles_ms+0x1a>
 178:	e7f5      	b.n	166 <delay_cycles_ms+0xe>
	}
}
 17a:	bd30      	pop	{r4, r5, pc}
 17c:	20000000 	.word	0x20000000
 180:	e000e010 	.word	0xe000e010

00000184 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 184:	4b0c      	ldr	r3, [pc, #48]	; (1b8 <cpu_irq_enter_critical+0x34>)
 186:	681b      	ldr	r3, [r3, #0]
 188:	2b00      	cmp	r3, #0
 18a:	d106      	bne.n	19a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 18c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 190:	2b00      	cmp	r3, #0
 192:	d007      	beq.n	1a4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 194:	2200      	movs	r2, #0
 196:	4b09      	ldr	r3, [pc, #36]	; (1bc <cpu_irq_enter_critical+0x38>)
 198:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 19a:	4a07      	ldr	r2, [pc, #28]	; (1b8 <cpu_irq_enter_critical+0x34>)
 19c:	6813      	ldr	r3, [r2, #0]
 19e:	3301      	adds	r3, #1
 1a0:	6013      	str	r3, [r2, #0]
}
 1a2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 1a4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 1a6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 1aa:	2200      	movs	r2, #0
 1ac:	4b04      	ldr	r3, [pc, #16]	; (1c0 <cpu_irq_enter_critical+0x3c>)
 1ae:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 1b0:	3201      	adds	r2, #1
 1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <cpu_irq_enter_critical+0x38>)
 1b4:	701a      	strb	r2, [r3, #0]
 1b6:	e7f0      	b.n	19a <cpu_irq_enter_critical+0x16>
 1b8:	20000028 	.word	0x20000028
 1bc:	2000002c 	.word	0x2000002c
 1c0:	20000008 	.word	0x20000008

000001c4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 1c4:	4b08      	ldr	r3, [pc, #32]	; (1e8 <cpu_irq_leave_critical+0x24>)
 1c6:	681a      	ldr	r2, [r3, #0]
 1c8:	3a01      	subs	r2, #1
 1ca:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 1cc:	681b      	ldr	r3, [r3, #0]
 1ce:	2b00      	cmp	r3, #0
 1d0:	d109      	bne.n	1e6 <cpu_irq_leave_critical+0x22>
 1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <cpu_irq_leave_critical+0x28>)
 1d4:	781b      	ldrb	r3, [r3, #0]
 1d6:	2b00      	cmp	r3, #0
 1d8:	d005      	beq.n	1e6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 1da:	2201      	movs	r2, #1
 1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <cpu_irq_leave_critical+0x2c>)
 1de:	701a      	strb	r2, [r3, #0]
 1e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 1e4:	b662      	cpsie	i
	}
}
 1e6:	4770      	bx	lr
 1e8:	20000028 	.word	0x20000028
 1ec:	2000002c 	.word	0x2000002c
 1f0:	20000008 	.word	0x20000008

000001f4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 1f4:	b500      	push	{lr}
 1f6:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 1f8:	ab01      	add	r3, sp, #4
 1fa:	2280      	movs	r2, #128	; 0x80
 1fc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 1fe:	780a      	ldrb	r2, [r1, #0]
 200:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 202:	784a      	ldrb	r2, [r1, #1]
 204:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 206:	788a      	ldrb	r2, [r1, #2]
 208:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 20a:	0019      	movs	r1, r3
 20c:	4b01      	ldr	r3, [pc, #4]	; (214 <port_pin_set_config+0x20>)
 20e:	4798      	blx	r3
}
 210:	b003      	add	sp, #12
 212:	bd00      	pop	{pc}
 214:	000007d9 	.word	0x000007d9

00000218 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 218:	b510      	push	{r4, lr}
	switch (clock_source) {
 21a:	2808      	cmp	r0, #8
 21c:	d803      	bhi.n	226 <system_clock_source_get_hz+0xe>
 21e:	0080      	lsls	r0, r0, #2
 220:	4b1b      	ldr	r3, [pc, #108]	; (290 <system_clock_source_get_hz+0x78>)
 222:	581b      	ldr	r3, [r3, r0]
 224:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
 226:	2000      	movs	r0, #0
 228:	e030      	b.n	28c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
 22a:	4b1a      	ldr	r3, [pc, #104]	; (294 <system_clock_source_get_hz+0x7c>)
 22c:	6918      	ldr	r0, [r3, #16]
 22e:	e02d      	b.n	28c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 230:	4b19      	ldr	r3, [pc, #100]	; (298 <system_clock_source_get_hz+0x80>)
 232:	6a1b      	ldr	r3, [r3, #32]
 234:	059b      	lsls	r3, r3, #22
 236:	0f9b      	lsrs	r3, r3, #30
 238:	4818      	ldr	r0, [pc, #96]	; (29c <system_clock_source_get_hz+0x84>)
 23a:	40d8      	lsrs	r0, r3
 23c:	e026      	b.n	28c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
 23e:	4b15      	ldr	r3, [pc, #84]	; (294 <system_clock_source_get_hz+0x7c>)
 240:	6958      	ldr	r0, [r3, #20]
 242:	e023      	b.n	28c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 244:	4b13      	ldr	r3, [pc, #76]	; (294 <system_clock_source_get_hz+0x7c>)
 246:	681b      	ldr	r3, [r3, #0]
			return 0;
 248:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 24a:	079b      	lsls	r3, r3, #30
 24c:	d51e      	bpl.n	28c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 24e:	4912      	ldr	r1, [pc, #72]	; (298 <system_clock_source_get_hz+0x80>)
 250:	2210      	movs	r2, #16
 252:	68cb      	ldr	r3, [r1, #12]
 254:	421a      	tst	r2, r3
 256:	d0fc      	beq.n	252 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
 258:	4b0e      	ldr	r3, [pc, #56]	; (294 <system_clock_source_get_hz+0x7c>)
 25a:	681b      	ldr	r3, [r3, #0]
 25c:	075b      	lsls	r3, r3, #29
 25e:	d401      	bmi.n	264 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
 260:	480f      	ldr	r0, [pc, #60]	; (2a0 <system_clock_source_get_hz+0x88>)
 262:	e013      	b.n	28c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 264:	2000      	movs	r0, #0
 266:	4b0f      	ldr	r3, [pc, #60]	; (2a4 <system_clock_source_get_hz+0x8c>)
 268:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 26a:	4b0a      	ldr	r3, [pc, #40]	; (294 <system_clock_source_get_hz+0x7c>)
 26c:	689b      	ldr	r3, [r3, #8]
 26e:	041b      	lsls	r3, r3, #16
 270:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 272:	4358      	muls	r0, r3
 274:	e00a      	b.n	28c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
 276:	2350      	movs	r3, #80	; 0x50
 278:	4a07      	ldr	r2, [pc, #28]	; (298 <system_clock_source_get_hz+0x80>)
 27a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
 27c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
 27e:	075b      	lsls	r3, r3, #29
 280:	d504      	bpl.n	28c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
 282:	4b04      	ldr	r3, [pc, #16]	; (294 <system_clock_source_get_hz+0x7c>)
 284:	68d8      	ldr	r0, [r3, #12]
 286:	e001      	b.n	28c <system_clock_source_get_hz+0x74>
		return 32768UL;
 288:	2080      	movs	r0, #128	; 0x80
 28a:	0200      	lsls	r0, r0, #8
	}
}
 28c:	bd10      	pop	{r4, pc}
 28e:	46c0      	nop			; (mov r8, r8)
 290:	00000b6c 	.word	0x00000b6c
 294:	20000030 	.word	0x20000030
 298:	40000800 	.word	0x40000800
 29c:	007a1200 	.word	0x007a1200
 2a0:	02dc6c00 	.word	0x02dc6c00
 2a4:	000006fd 	.word	0x000006fd

000002a8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 2a8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 2aa:	490c      	ldr	r1, [pc, #48]	; (2dc <system_clock_source_osc8m_set_config+0x34>)
 2ac:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 2ae:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 2b0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 2b2:	7840      	ldrb	r0, [r0, #1]
 2b4:	2201      	movs	r2, #1
 2b6:	4010      	ands	r0, r2
 2b8:	0180      	lsls	r0, r0, #6
 2ba:	2640      	movs	r6, #64	; 0x40
 2bc:	43b3      	bics	r3, r6
 2be:	4303      	orrs	r3, r0
 2c0:	402a      	ands	r2, r5
 2c2:	01d2      	lsls	r2, r2, #7
 2c4:	2080      	movs	r0, #128	; 0x80
 2c6:	4383      	bics	r3, r0
 2c8:	4313      	orrs	r3, r2
 2ca:	2203      	movs	r2, #3
 2cc:	4022      	ands	r2, r4
 2ce:	0212      	lsls	r2, r2, #8
 2d0:	4803      	ldr	r0, [pc, #12]	; (2e0 <system_clock_source_osc8m_set_config+0x38>)
 2d2:	4003      	ands	r3, r0
 2d4:	4313      	orrs	r3, r2
 2d6:	620b      	str	r3, [r1, #32]
}
 2d8:	bd70      	pop	{r4, r5, r6, pc}
 2da:	46c0      	nop			; (mov r8, r8)
 2dc:	40000800 	.word	0x40000800
 2e0:	fffffcff 	.word	0xfffffcff

000002e4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
 2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 2e6:	46ce      	mov	lr, r9
 2e8:	4647      	mov	r7, r8
 2ea:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
 2ec:	4b19      	ldr	r3, [pc, #100]	; (354 <system_clock_source_osc32k_set_config+0x70>)
 2ee:	4699      	mov	r9, r3
 2f0:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
 2f2:	7841      	ldrb	r1, [r0, #1]
 2f4:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
 2f6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 2f8:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
 2fa:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
 2fc:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
 2fe:	7880      	ldrb	r0, [r0, #2]
 300:	2101      	movs	r1, #1
 302:	4008      	ands	r0, r1
 304:	0080      	lsls	r0, r0, #2
 306:	2204      	movs	r2, #4
 308:	4393      	bics	r3, r2
 30a:	4303      	orrs	r3, r0
 30c:	4660      	mov	r0, ip
 30e:	4008      	ands	r0, r1
 310:	00c0      	lsls	r0, r0, #3
 312:	3204      	adds	r2, #4
 314:	4393      	bics	r3, r2
 316:	4303      	orrs	r3, r0
 318:	0038      	movs	r0, r7
 31a:	4008      	ands	r0, r1
 31c:	0180      	lsls	r0, r0, #6
 31e:	2740      	movs	r7, #64	; 0x40
 320:	43bb      	bics	r3, r7
 322:	4303      	orrs	r3, r0
 324:	0030      	movs	r0, r6
 326:	4008      	ands	r0, r1
 328:	01c0      	lsls	r0, r0, #7
 32a:	2680      	movs	r6, #128	; 0x80
 32c:	43b3      	bics	r3, r6
 32e:	4303      	orrs	r3, r0
 330:	2007      	movs	r0, #7
 332:	4005      	ands	r5, r0
 334:	022d      	lsls	r5, r5, #8
 336:	4808      	ldr	r0, [pc, #32]	; (358 <system_clock_source_osc32k_set_config+0x74>)
 338:	4003      	ands	r3, r0
 33a:	432b      	orrs	r3, r5
 33c:	4021      	ands	r1, r4
 33e:	0309      	lsls	r1, r1, #12
 340:	4806      	ldr	r0, [pc, #24]	; (35c <system_clock_source_osc32k_set_config+0x78>)
 342:	4003      	ands	r3, r0
 344:	430b      	orrs	r3, r1
 346:	464a      	mov	r2, r9
 348:	6193      	str	r3, [r2, #24]
}
 34a:	bc0c      	pop	{r2, r3}
 34c:	4690      	mov	r8, r2
 34e:	4699      	mov	r9, r3
 350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 352:	46c0      	nop			; (mov r8, r8)
 354:	40000800 	.word	0x40000800
 358:	fffff8ff 	.word	0xfffff8ff
 35c:	ffffefff 	.word	0xffffefff

00000360 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 360:	2808      	cmp	r0, #8
 362:	d803      	bhi.n	36c <system_clock_source_enable+0xc>
 364:	0080      	lsls	r0, r0, #2
 366:	4b25      	ldr	r3, [pc, #148]	; (3fc <system_clock_source_enable+0x9c>)
 368:	581b      	ldr	r3, [r3, r0]
 36a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 36c:	2017      	movs	r0, #23
 36e:	e044      	b.n	3fa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 370:	4a23      	ldr	r2, [pc, #140]	; (400 <system_clock_source_enable+0xa0>)
 372:	6a13      	ldr	r3, [r2, #32]
 374:	2102      	movs	r1, #2
 376:	430b      	orrs	r3, r1
 378:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 37a:	2000      	movs	r0, #0
 37c:	e03d      	b.n	3fa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 37e:	4a20      	ldr	r2, [pc, #128]	; (400 <system_clock_source_enable+0xa0>)
 380:	6993      	ldr	r3, [r2, #24]
 382:	2102      	movs	r1, #2
 384:	430b      	orrs	r3, r1
 386:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 388:	2000      	movs	r0, #0
		break;
 38a:	e036      	b.n	3fa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 38c:	4a1c      	ldr	r2, [pc, #112]	; (400 <system_clock_source_enable+0xa0>)
 38e:	8a13      	ldrh	r3, [r2, #16]
 390:	2102      	movs	r1, #2
 392:	430b      	orrs	r3, r1
 394:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 396:	2000      	movs	r0, #0
		break;
 398:	e02f      	b.n	3fa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 39a:	4a19      	ldr	r2, [pc, #100]	; (400 <system_clock_source_enable+0xa0>)
 39c:	8a93      	ldrh	r3, [r2, #20]
 39e:	2102      	movs	r1, #2
 3a0:	430b      	orrs	r3, r1
 3a2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 3a4:	2000      	movs	r0, #0
		break;
 3a6:	e028      	b.n	3fa <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 3a8:	4916      	ldr	r1, [pc, #88]	; (404 <system_clock_source_enable+0xa4>)
 3aa:	680b      	ldr	r3, [r1, #0]
 3ac:	2202      	movs	r2, #2
 3ae:	4313      	orrs	r3, r2
 3b0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 3b2:	4b13      	ldr	r3, [pc, #76]	; (400 <system_clock_source_enable+0xa0>)
 3b4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 3b6:	0019      	movs	r1, r3
 3b8:	320e      	adds	r2, #14
 3ba:	68cb      	ldr	r3, [r1, #12]
 3bc:	421a      	tst	r2, r3
 3be:	d0fc      	beq.n	3ba <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 3c0:	4a10      	ldr	r2, [pc, #64]	; (404 <system_clock_source_enable+0xa4>)
 3c2:	6891      	ldr	r1, [r2, #8]
 3c4:	4b0e      	ldr	r3, [pc, #56]	; (400 <system_clock_source_enable+0xa0>)
 3c6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 3c8:	6852      	ldr	r2, [r2, #4]
 3ca:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 3cc:	2200      	movs	r2, #0
 3ce:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 3d0:	0019      	movs	r1, r3
 3d2:	3210      	adds	r2, #16
 3d4:	68cb      	ldr	r3, [r1, #12]
 3d6:	421a      	tst	r2, r3
 3d8:	d0fc      	beq.n	3d4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 3da:	4b0a      	ldr	r3, [pc, #40]	; (404 <system_clock_source_enable+0xa4>)
 3dc:	681b      	ldr	r3, [r3, #0]
 3de:	b29b      	uxth	r3, r3
 3e0:	4a07      	ldr	r2, [pc, #28]	; (400 <system_clock_source_enable+0xa0>)
 3e2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 3e4:	2000      	movs	r0, #0
 3e6:	e008      	b.n	3fa <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 3e8:	4905      	ldr	r1, [pc, #20]	; (400 <system_clock_source_enable+0xa0>)
 3ea:	2244      	movs	r2, #68	; 0x44
 3ec:	5c8b      	ldrb	r3, [r1, r2]
 3ee:	2002      	movs	r0, #2
 3f0:	4303      	orrs	r3, r0
 3f2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 3f4:	2000      	movs	r0, #0
		break;
 3f6:	e000      	b.n	3fa <system_clock_source_enable+0x9a>
		return STATUS_OK;
 3f8:	2000      	movs	r0, #0
}
 3fa:	4770      	bx	lr
 3fc:	00000b90 	.word	0x00000b90
 400:	40000800 	.word	0x40000800
 404:	20000030 	.word	0x20000030

00000408 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 408:	b570      	push	{r4, r5, r6, lr}
 40a:	b086      	sub	sp, #24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 40c:	22c2      	movs	r2, #194	; 0xc2
 40e:	00d2      	lsls	r2, r2, #3
 410:	4b25      	ldr	r3, [pc, #148]	; (4a8 <system_clock_init+0xa0>)
 412:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 414:	4a25      	ldr	r2, [pc, #148]	; (4ac <system_clock_init+0xa4>)
 416:	6853      	ldr	r3, [r2, #4]
 418:	211e      	movs	r1, #30
 41a:	438b      	bics	r3, r1
 41c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 41e:	2301      	movs	r3, #1
 420:	466a      	mov	r2, sp
 422:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 424:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 426:	4d22      	ldr	r5, [pc, #136]	; (4b0 <system_clock_init+0xa8>)
 428:	b2e0      	uxtb	r0, r4
 42a:	4669      	mov	r1, sp
 42c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 42e:	3401      	adds	r4, #1
 430:	2c25      	cmp	r4, #37	; 0x25
 432:	d1f9      	bne.n	428 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
 434:	4b1f      	ldr	r3, [pc, #124]	; (4b4 <system_clock_init+0xac>)
 436:	681b      	ldr	r3, [r3, #0]
	SYSCTRL->OSC32K.bit.CALIB =
 438:	04db      	lsls	r3, r3, #19
 43a:	491b      	ldr	r1, [pc, #108]	; (4a8 <system_clock_init+0xa0>)
 43c:	698a      	ldr	r2, [r1, #24]
 43e:	0e5b      	lsrs	r3, r3, #25
 440:	041b      	lsls	r3, r3, #16
 442:	481d      	ldr	r0, [pc, #116]	; (4b8 <system_clock_init+0xb0>)
 444:	4002      	ands	r2, r0
 446:	4313      	orrs	r3, r2
 448:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
 44a:	a804      	add	r0, sp, #16
 44c:	2501      	movs	r5, #1
 44e:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
 450:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
 452:	2400      	movs	r4, #0
 454:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
 456:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
 458:	2307      	movs	r3, #7
 45a:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
 45c:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
 45e:	4b17      	ldr	r3, [pc, #92]	; (4bc <system_clock_init+0xb4>)
 460:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
 462:	2004      	movs	r0, #4
 464:	4e16      	ldr	r6, [pc, #88]	; (4c0 <system_clock_init+0xb8>)
 466:	47b0      	blx	r6
	config->run_in_standby  = false;
 468:	a803      	add	r0, sp, #12
 46a:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 46c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 46e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 470:	4b14      	ldr	r3, [pc, #80]	; (4c4 <system_clock_init+0xbc>)
 472:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 474:	2006      	movs	r0, #6
 476:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 478:	4b13      	ldr	r3, [pc, #76]	; (4c8 <system_clock_init+0xc0>)
 47a:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 47c:	4b13      	ldr	r3, [pc, #76]	; (4cc <system_clock_init+0xc4>)
 47e:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 480:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 482:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 484:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 486:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 488:	466b      	mov	r3, sp
 48a:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 48c:	2306      	movs	r3, #6
 48e:	466a      	mov	r2, sp
 490:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 492:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 494:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 496:	4669      	mov	r1, sp
 498:	2000      	movs	r0, #0
 49a:	4b0d      	ldr	r3, [pc, #52]	; (4d0 <system_clock_init+0xc8>)
 49c:	4798      	blx	r3
 49e:	2000      	movs	r0, #0
 4a0:	4b0c      	ldr	r3, [pc, #48]	; (4d4 <system_clock_init+0xcc>)
 4a2:	4798      	blx	r3
#endif
}
 4a4:	b006      	add	sp, #24
 4a6:	bd70      	pop	{r4, r5, r6, pc}
 4a8:	40000800 	.word	0x40000800
 4ac:	41004000 	.word	0x41004000
 4b0:	000006e1 	.word	0x000006e1
 4b4:	00806024 	.word	0x00806024
 4b8:	ff80ffff 	.word	0xff80ffff
 4bc:	000002e5 	.word	0x000002e5
 4c0:	00000361 	.word	0x00000361
 4c4:	000002a9 	.word	0x000002a9
 4c8:	000004d9 	.word	0x000004d9
 4cc:	40000400 	.word	0x40000400
 4d0:	000004fd 	.word	0x000004fd
 4d4:	000005b5 	.word	0x000005b5

000004d8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 4d8:	4a06      	ldr	r2, [pc, #24]	; (4f4 <system_gclk_init+0x1c>)
 4da:	6993      	ldr	r3, [r2, #24]
 4dc:	2108      	movs	r1, #8
 4de:	430b      	orrs	r3, r1
 4e0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 4e2:	2201      	movs	r2, #1
 4e4:	4b04      	ldr	r3, [pc, #16]	; (4f8 <system_gclk_init+0x20>)
 4e6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 4e8:	0019      	movs	r1, r3
 4ea:	780b      	ldrb	r3, [r1, #0]
 4ec:	4213      	tst	r3, r2
 4ee:	d1fc      	bne.n	4ea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 4f0:	4770      	bx	lr
 4f2:	46c0      	nop			; (mov r8, r8)
 4f4:	40000400 	.word	0x40000400
 4f8:	40000c00 	.word	0x40000c00

000004fc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 4fc:	b570      	push	{r4, r5, r6, lr}
 4fe:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 500:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 502:	780d      	ldrb	r5, [r1, #0]
 504:	022d      	lsls	r5, r5, #8
 506:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 508:	784b      	ldrb	r3, [r1, #1]
 50a:	2b00      	cmp	r3, #0
 50c:	d002      	beq.n	514 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 50e:	2380      	movs	r3, #128	; 0x80
 510:	02db      	lsls	r3, r3, #11
 512:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 514:	7a4b      	ldrb	r3, [r1, #9]
 516:	2b00      	cmp	r3, #0
 518:	d002      	beq.n	520 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 51a:	2380      	movs	r3, #128	; 0x80
 51c:	031b      	lsls	r3, r3, #12
 51e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 520:	6848      	ldr	r0, [r1, #4]
 522:	2801      	cmp	r0, #1
 524:	d910      	bls.n	548 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 526:	1e43      	subs	r3, r0, #1
 528:	4218      	tst	r0, r3
 52a:	d134      	bne.n	596 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 52c:	2802      	cmp	r0, #2
 52e:	d930      	bls.n	592 <system_gclk_gen_set_config+0x96>
 530:	2302      	movs	r3, #2
 532:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 534:	3201      	adds	r2, #1
						mask <<= 1) {
 536:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 538:	4298      	cmp	r0, r3
 53a:	d8fb      	bhi.n	534 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 53c:	0212      	lsls	r2, r2, #8
 53e:	4332      	orrs	r2, r6
 540:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 542:	2380      	movs	r3, #128	; 0x80
 544:	035b      	lsls	r3, r3, #13
 546:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 548:	7a0b      	ldrb	r3, [r1, #8]
 54a:	2b00      	cmp	r3, #0
 54c:	d002      	beq.n	554 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 54e:	2380      	movs	r3, #128	; 0x80
 550:	039b      	lsls	r3, r3, #14
 552:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 554:	4a13      	ldr	r2, [pc, #76]	; (5a4 <system_gclk_gen_set_config+0xa8>)
 556:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 558:	b25b      	sxtb	r3, r3
 55a:	2b00      	cmp	r3, #0
 55c:	dbfb      	blt.n	556 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 55e:	4b12      	ldr	r3, [pc, #72]	; (5a8 <system_gclk_gen_set_config+0xac>)
 560:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 562:	4b12      	ldr	r3, [pc, #72]	; (5ac <system_gclk_gen_set_config+0xb0>)
 564:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 566:	4a0f      	ldr	r2, [pc, #60]	; (5a4 <system_gclk_gen_set_config+0xa8>)
 568:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 56a:	b25b      	sxtb	r3, r3
 56c:	2b00      	cmp	r3, #0
 56e:	dbfb      	blt.n	568 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 570:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <system_gclk_gen_set_config+0xa8>)
 572:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 574:	001a      	movs	r2, r3
 576:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 578:	b25b      	sxtb	r3, r3
 57a:	2b00      	cmp	r3, #0
 57c:	dbfb      	blt.n	576 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 57e:	4a09      	ldr	r2, [pc, #36]	; (5a4 <system_gclk_gen_set_config+0xa8>)
 580:	6853      	ldr	r3, [r2, #4]
 582:	2180      	movs	r1, #128	; 0x80
 584:	0249      	lsls	r1, r1, #9
 586:	400b      	ands	r3, r1
 588:	431d      	orrs	r5, r3
 58a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 58c:	4b08      	ldr	r3, [pc, #32]	; (5b0 <system_gclk_gen_set_config+0xb4>)
 58e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 590:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 592:	2200      	movs	r2, #0
 594:	e7d2      	b.n	53c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 596:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 598:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 59a:	2380      	movs	r3, #128	; 0x80
 59c:	029b      	lsls	r3, r3, #10
 59e:	431d      	orrs	r5, r3
 5a0:	e7d2      	b.n	548 <system_gclk_gen_set_config+0x4c>
 5a2:	46c0      	nop			; (mov r8, r8)
 5a4:	40000c00 	.word	0x40000c00
 5a8:	00000185 	.word	0x00000185
 5ac:	40000c08 	.word	0x40000c08
 5b0:	000001c5 	.word	0x000001c5

000005b4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 5b4:	b510      	push	{r4, lr}
 5b6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5b8:	4a0b      	ldr	r2, [pc, #44]	; (5e8 <system_gclk_gen_enable+0x34>)
 5ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 5bc:	b25b      	sxtb	r3, r3
 5be:	2b00      	cmp	r3, #0
 5c0:	dbfb      	blt.n	5ba <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 5c2:	4b0a      	ldr	r3, [pc, #40]	; (5ec <system_gclk_gen_enable+0x38>)
 5c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 5c6:	4b0a      	ldr	r3, [pc, #40]	; (5f0 <system_gclk_gen_enable+0x3c>)
 5c8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5ca:	4a07      	ldr	r2, [pc, #28]	; (5e8 <system_gclk_gen_enable+0x34>)
 5cc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 5ce:	b25b      	sxtb	r3, r3
 5d0:	2b00      	cmp	r3, #0
 5d2:	dbfb      	blt.n	5cc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 5d4:	4a04      	ldr	r2, [pc, #16]	; (5e8 <system_gclk_gen_enable+0x34>)
 5d6:	6851      	ldr	r1, [r2, #4]
 5d8:	2380      	movs	r3, #128	; 0x80
 5da:	025b      	lsls	r3, r3, #9
 5dc:	430b      	orrs	r3, r1
 5de:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 5e0:	4b04      	ldr	r3, [pc, #16]	; (5f4 <system_gclk_gen_enable+0x40>)
 5e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 5e4:	bd10      	pop	{r4, pc}
 5e6:	46c0      	nop			; (mov r8, r8)
 5e8:	40000c00 	.word	0x40000c00
 5ec:	00000185 	.word	0x00000185
 5f0:	40000c04 	.word	0x40000c04
 5f4:	000001c5 	.word	0x000001c5

000005f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 5f8:	b570      	push	{r4, r5, r6, lr}
 5fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5fc:	4a1a      	ldr	r2, [pc, #104]	; (668 <system_gclk_gen_get_hz+0x70>)
 5fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 600:	b25b      	sxtb	r3, r3
 602:	2b00      	cmp	r3, #0
 604:	dbfb      	blt.n	5fe <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
 606:	4b19      	ldr	r3, [pc, #100]	; (66c <system_gclk_gen_get_hz+0x74>)
 608:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 60a:	4b19      	ldr	r3, [pc, #100]	; (670 <system_gclk_gen_get_hz+0x78>)
 60c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 60e:	4a16      	ldr	r2, [pc, #88]	; (668 <system_gclk_gen_get_hz+0x70>)
 610:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 612:	b25b      	sxtb	r3, r3
 614:	2b00      	cmp	r3, #0
 616:	dbfb      	blt.n	610 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 618:	4e13      	ldr	r6, [pc, #76]	; (668 <system_gclk_gen_get_hz+0x70>)
 61a:	6870      	ldr	r0, [r6, #4]
 61c:	04c0      	lsls	r0, r0, #19
 61e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
 620:	4b14      	ldr	r3, [pc, #80]	; (674 <system_gclk_gen_get_hz+0x7c>)
 622:	4798      	blx	r3
 624:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 626:	4b12      	ldr	r3, [pc, #72]	; (670 <system_gclk_gen_get_hz+0x78>)
 628:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 62a:	6876      	ldr	r6, [r6, #4]
 62c:	02f6      	lsls	r6, r6, #11
 62e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 630:	4b11      	ldr	r3, [pc, #68]	; (678 <system_gclk_gen_get_hz+0x80>)
 632:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 634:	4a0c      	ldr	r2, [pc, #48]	; (668 <system_gclk_gen_get_hz+0x70>)
 636:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 638:	b25b      	sxtb	r3, r3
 63a:	2b00      	cmp	r3, #0
 63c:	dbfb      	blt.n	636 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 63e:	4b0a      	ldr	r3, [pc, #40]	; (668 <system_gclk_gen_get_hz+0x70>)
 640:	689c      	ldr	r4, [r3, #8]
 642:	0224      	lsls	r4, r4, #8
 644:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 646:	4b0d      	ldr	r3, [pc, #52]	; (67c <system_gclk_gen_get_hz+0x84>)
 648:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 64a:	2e00      	cmp	r6, #0
 64c:	d107      	bne.n	65e <system_gclk_gen_get_hz+0x66>
 64e:	2c01      	cmp	r4, #1
 650:	d907      	bls.n	662 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 652:	0021      	movs	r1, r4
 654:	0028      	movs	r0, r5
 656:	4b0a      	ldr	r3, [pc, #40]	; (680 <system_gclk_gen_get_hz+0x88>)
 658:	4798      	blx	r3
 65a:	0005      	movs	r5, r0
 65c:	e001      	b.n	662 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 65e:	3401      	adds	r4, #1
 660:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
 662:	0028      	movs	r0, r5
 664:	bd70      	pop	{r4, r5, r6, pc}
 666:	46c0      	nop			; (mov r8, r8)
 668:	40000c00 	.word	0x40000c00
 66c:	00000185 	.word	0x00000185
 670:	40000c04 	.word	0x40000c04
 674:	00000219 	.word	0x00000219
 678:	40000c08 	.word	0x40000c08
 67c:	000001c5 	.word	0x000001c5
 680:	00000a0d 	.word	0x00000a0d

00000684 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 684:	b510      	push	{r4, lr}
 686:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 688:	4b0f      	ldr	r3, [pc, #60]	; (6c8 <system_gclk_chan_disable+0x44>)
 68a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 68c:	4b0f      	ldr	r3, [pc, #60]	; (6cc <system_gclk_chan_disable+0x48>)
 68e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 690:	4a0f      	ldr	r2, [pc, #60]	; (6d0 <system_gclk_chan_disable+0x4c>)
 692:	8853      	ldrh	r3, [r2, #2]
 694:	051b      	lsls	r3, r3, #20
 696:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 698:	8853      	ldrh	r3, [r2, #2]
 69a:	490e      	ldr	r1, [pc, #56]	; (6d4 <system_gclk_chan_disable+0x50>)
 69c:	400b      	ands	r3, r1
 69e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 6a0:	8853      	ldrh	r3, [r2, #2]
 6a2:	490d      	ldr	r1, [pc, #52]	; (6d8 <system_gclk_chan_disable+0x54>)
 6a4:	400b      	ands	r3, r1
 6a6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 6a8:	0011      	movs	r1, r2
 6aa:	2280      	movs	r2, #128	; 0x80
 6ac:	01d2      	lsls	r2, r2, #7
 6ae:	884b      	ldrh	r3, [r1, #2]
 6b0:	4213      	tst	r3, r2
 6b2:	d1fc      	bne.n	6ae <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 6b4:	4906      	ldr	r1, [pc, #24]	; (6d0 <system_gclk_chan_disable+0x4c>)
 6b6:	884a      	ldrh	r2, [r1, #2]
 6b8:	0203      	lsls	r3, r0, #8
 6ba:	4806      	ldr	r0, [pc, #24]	; (6d4 <system_gclk_chan_disable+0x50>)
 6bc:	4002      	ands	r2, r0
 6be:	4313      	orrs	r3, r2
 6c0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 6c2:	4b06      	ldr	r3, [pc, #24]	; (6dc <system_gclk_chan_disable+0x58>)
 6c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 6c6:	bd10      	pop	{r4, pc}
 6c8:	00000185 	.word	0x00000185
 6cc:	40000c02 	.word	0x40000c02
 6d0:	40000c00 	.word	0x40000c00
 6d4:	fffff0ff 	.word	0xfffff0ff
 6d8:	ffffbfff 	.word	0xffffbfff
 6dc:	000001c5 	.word	0x000001c5

000006e0 <system_gclk_chan_set_config>:
{
 6e0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 6e2:	780c      	ldrb	r4, [r1, #0]
 6e4:	0224      	lsls	r4, r4, #8
 6e6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 6e8:	4b02      	ldr	r3, [pc, #8]	; (6f4 <system_gclk_chan_set_config+0x14>)
 6ea:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 6ec:	b2a4      	uxth	r4, r4
 6ee:	4b02      	ldr	r3, [pc, #8]	; (6f8 <system_gclk_chan_set_config+0x18>)
 6f0:	805c      	strh	r4, [r3, #2]
}
 6f2:	bd10      	pop	{r4, pc}
 6f4:	00000685 	.word	0x00000685
 6f8:	40000c00 	.word	0x40000c00

000006fc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 6fc:	b510      	push	{r4, lr}
 6fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 700:	4b06      	ldr	r3, [pc, #24]	; (71c <system_gclk_chan_get_hz+0x20>)
 702:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 704:	4b06      	ldr	r3, [pc, #24]	; (720 <system_gclk_chan_get_hz+0x24>)
 706:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 708:	4b06      	ldr	r3, [pc, #24]	; (724 <system_gclk_chan_get_hz+0x28>)
 70a:	885c      	ldrh	r4, [r3, #2]
 70c:	0524      	lsls	r4, r4, #20
 70e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
 710:	4b05      	ldr	r3, [pc, #20]	; (728 <system_gclk_chan_get_hz+0x2c>)
 712:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 714:	0020      	movs	r0, r4
 716:	4b05      	ldr	r3, [pc, #20]	; (72c <system_gclk_chan_get_hz+0x30>)
 718:	4798      	blx	r3
}
 71a:	bd10      	pop	{r4, pc}
 71c:	00000185 	.word	0x00000185
 720:	40000c02 	.word	0x40000c02
 724:	40000c00 	.word	0x40000c00
 728:	000001c5 	.word	0x000001c5
 72c:	000005f9 	.word	0x000005f9

00000730 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 730:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 732:	78d3      	ldrb	r3, [r2, #3]
 734:	2b00      	cmp	r3, #0
 736:	d135      	bne.n	7a4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 738:	7813      	ldrb	r3, [r2, #0]
 73a:	2b80      	cmp	r3, #128	; 0x80
 73c:	d029      	beq.n	792 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 73e:	061b      	lsls	r3, r3, #24
 740:	2480      	movs	r4, #128	; 0x80
 742:	0264      	lsls	r4, r4, #9
 744:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 746:	7854      	ldrb	r4, [r2, #1]
 748:	2502      	movs	r5, #2
 74a:	43ac      	bics	r4, r5
 74c:	d106      	bne.n	75c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 74e:	7894      	ldrb	r4, [r2, #2]
 750:	2c00      	cmp	r4, #0
 752:	d120      	bne.n	796 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 754:	2480      	movs	r4, #128	; 0x80
 756:	02a4      	lsls	r4, r4, #10
 758:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 75a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 75c:	7854      	ldrb	r4, [r2, #1]
 75e:	3c01      	subs	r4, #1
 760:	2c01      	cmp	r4, #1
 762:	d91c      	bls.n	79e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 764:	040d      	lsls	r5, r1, #16
 766:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 768:	24a0      	movs	r4, #160	; 0xa0
 76a:	05e4      	lsls	r4, r4, #23
 76c:	432c      	orrs	r4, r5
 76e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 770:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 772:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 774:	24d0      	movs	r4, #208	; 0xd0
 776:	0624      	lsls	r4, r4, #24
 778:	432c      	orrs	r4, r5
 77a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 77c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 77e:	78d4      	ldrb	r4, [r2, #3]
 780:	2c00      	cmp	r4, #0
 782:	d122      	bne.n	7ca <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 784:	035b      	lsls	r3, r3, #13
 786:	d51c      	bpl.n	7c2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 788:	7893      	ldrb	r3, [r2, #2]
 78a:	2b01      	cmp	r3, #1
 78c:	d01e      	beq.n	7cc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 78e:	6141      	str	r1, [r0, #20]
 790:	e017      	b.n	7c2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 792:	2300      	movs	r3, #0
 794:	e7d7      	b.n	746 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 796:	24c0      	movs	r4, #192	; 0xc0
 798:	02e4      	lsls	r4, r4, #11
 79a:	4323      	orrs	r3, r4
 79c:	e7dd      	b.n	75a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 79e:	4c0d      	ldr	r4, [pc, #52]	; (7d4 <_system_pinmux_config+0xa4>)
 7a0:	4023      	ands	r3, r4
 7a2:	e7df      	b.n	764 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 7a4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 7a6:	040c      	lsls	r4, r1, #16
 7a8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 7aa:	23a0      	movs	r3, #160	; 0xa0
 7ac:	05db      	lsls	r3, r3, #23
 7ae:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 7b0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 7b2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 7b4:	23d0      	movs	r3, #208	; 0xd0
 7b6:	061b      	lsls	r3, r3, #24
 7b8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 7ba:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 7bc:	78d3      	ldrb	r3, [r2, #3]
 7be:	2b00      	cmp	r3, #0
 7c0:	d103      	bne.n	7ca <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 7c2:	7853      	ldrb	r3, [r2, #1]
 7c4:	3b01      	subs	r3, #1
 7c6:	2b01      	cmp	r3, #1
 7c8:	d902      	bls.n	7d0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 7ca:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 7cc:	6181      	str	r1, [r0, #24]
 7ce:	e7f8      	b.n	7c2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 7d0:	6081      	str	r1, [r0, #8]
}
 7d2:	e7fa      	b.n	7ca <_system_pinmux_config+0x9a>
 7d4:	fffbffff 	.word	0xfffbffff

000007d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 7d8:	b510      	push	{r4, lr}
 7da:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 7dc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 7de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 7e0:	2900      	cmp	r1, #0
 7e2:	d104      	bne.n	7ee <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 7e4:	0943      	lsrs	r3, r0, #5
 7e6:	01db      	lsls	r3, r3, #7
 7e8:	4905      	ldr	r1, [pc, #20]	; (800 <system_pinmux_pin_set_config+0x28>)
 7ea:	468c      	mov	ip, r1
 7ec:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 7ee:	241f      	movs	r4, #31
 7f0:	4020      	ands	r0, r4
 7f2:	2101      	movs	r1, #1
 7f4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 7f6:	0018      	movs	r0, r3
 7f8:	4b02      	ldr	r3, [pc, #8]	; (804 <system_pinmux_pin_set_config+0x2c>)
 7fa:	4798      	blx	r3
}
 7fc:	bd10      	pop	{r4, pc}
 7fe:	46c0      	nop			; (mov r8, r8)
 800:	41004400 	.word	0x41004400
 804:	00000731 	.word	0x00000731

00000808 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 808:	4770      	bx	lr
	...

0000080c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 80c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 80e:	4b05      	ldr	r3, [pc, #20]	; (824 <system_init+0x18>)
 810:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 812:	4b05      	ldr	r3, [pc, #20]	; (828 <system_init+0x1c>)
 814:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 816:	4b05      	ldr	r3, [pc, #20]	; (82c <system_init+0x20>)
 818:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 81a:	4b05      	ldr	r3, [pc, #20]	; (830 <system_init+0x24>)
 81c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 81e:	4b05      	ldr	r3, [pc, #20]	; (834 <system_init+0x28>)
 820:	4798      	blx	r3
}
 822:	bd10      	pop	{r4, pc}
 824:	00000409 	.word	0x00000409
 828:	00000115 	.word	0x00000115
 82c:	00000809 	.word	0x00000809
 830:	00000809 	.word	0x00000809
 834:	00000809 	.word	0x00000809

00000838 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 838:	e7fe      	b.n	838 <Dummy_Handler>
	...

0000083c <Reset_Handler>:
{
 83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 83e:	4a2a      	ldr	r2, [pc, #168]	; (8e8 <Reset_Handler+0xac>)
 840:	4b2a      	ldr	r3, [pc, #168]	; (8ec <Reset_Handler+0xb0>)
 842:	429a      	cmp	r2, r3
 844:	d011      	beq.n	86a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 846:	001a      	movs	r2, r3
 848:	4b29      	ldr	r3, [pc, #164]	; (8f0 <Reset_Handler+0xb4>)
 84a:	429a      	cmp	r2, r3
 84c:	d20d      	bcs.n	86a <Reset_Handler+0x2e>
 84e:	4a29      	ldr	r2, [pc, #164]	; (8f4 <Reset_Handler+0xb8>)
 850:	3303      	adds	r3, #3
 852:	1a9b      	subs	r3, r3, r2
 854:	089b      	lsrs	r3, r3, #2
 856:	3301      	adds	r3, #1
 858:	009b      	lsls	r3, r3, #2
 85a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 85c:	4823      	ldr	r0, [pc, #140]	; (8ec <Reset_Handler+0xb0>)
 85e:	4922      	ldr	r1, [pc, #136]	; (8e8 <Reset_Handler+0xac>)
 860:	588c      	ldr	r4, [r1, r2]
 862:	5084      	str	r4, [r0, r2]
 864:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 866:	429a      	cmp	r2, r3
 868:	d1fa      	bne.n	860 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 86a:	4a23      	ldr	r2, [pc, #140]	; (8f8 <Reset_Handler+0xbc>)
 86c:	4b23      	ldr	r3, [pc, #140]	; (8fc <Reset_Handler+0xc0>)
 86e:	429a      	cmp	r2, r3
 870:	d20a      	bcs.n	888 <Reset_Handler+0x4c>
 872:	43d3      	mvns	r3, r2
 874:	4921      	ldr	r1, [pc, #132]	; (8fc <Reset_Handler+0xc0>)
 876:	185b      	adds	r3, r3, r1
 878:	2103      	movs	r1, #3
 87a:	438b      	bics	r3, r1
 87c:	3304      	adds	r3, #4
 87e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 880:	2100      	movs	r1, #0
 882:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 884:	4293      	cmp	r3, r2
 886:	d1fc      	bne.n	882 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 888:	4a1d      	ldr	r2, [pc, #116]	; (900 <Reset_Handler+0xc4>)
 88a:	21ff      	movs	r1, #255	; 0xff
 88c:	4b1d      	ldr	r3, [pc, #116]	; (904 <Reset_Handler+0xc8>)
 88e:	438b      	bics	r3, r1
 890:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 892:	39fd      	subs	r1, #253	; 0xfd
 894:	2390      	movs	r3, #144	; 0x90
 896:	005b      	lsls	r3, r3, #1
 898:	4a1b      	ldr	r2, [pc, #108]	; (908 <Reset_Handler+0xcc>)
 89a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 89c:	4a1b      	ldr	r2, [pc, #108]	; (90c <Reset_Handler+0xd0>)
 89e:	78d3      	ldrb	r3, [r2, #3]
 8a0:	2503      	movs	r5, #3
 8a2:	43ab      	bics	r3, r5
 8a4:	2402      	movs	r4, #2
 8a6:	4323      	orrs	r3, r4
 8a8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 8aa:	78d3      	ldrb	r3, [r2, #3]
 8ac:	270c      	movs	r7, #12
 8ae:	43bb      	bics	r3, r7
 8b0:	2608      	movs	r6, #8
 8b2:	4333      	orrs	r3, r6
 8b4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 8b6:	4b16      	ldr	r3, [pc, #88]	; (910 <Reset_Handler+0xd4>)
 8b8:	7b98      	ldrb	r0, [r3, #14]
 8ba:	2230      	movs	r2, #48	; 0x30
 8bc:	4390      	bics	r0, r2
 8be:	2220      	movs	r2, #32
 8c0:	4310      	orrs	r0, r2
 8c2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 8c4:	7b99      	ldrb	r1, [r3, #14]
 8c6:	43b9      	bics	r1, r7
 8c8:	4331      	orrs	r1, r6
 8ca:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 8cc:	7b9a      	ldrb	r2, [r3, #14]
 8ce:	43aa      	bics	r2, r5
 8d0:	4322      	orrs	r2, r4
 8d2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 8d4:	4a0f      	ldr	r2, [pc, #60]	; (914 <Reset_Handler+0xd8>)
 8d6:	6853      	ldr	r3, [r2, #4]
 8d8:	2180      	movs	r1, #128	; 0x80
 8da:	430b      	orrs	r3, r1
 8dc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 8de:	4b0e      	ldr	r3, [pc, #56]	; (918 <Reset_Handler+0xdc>)
 8e0:	4798      	blx	r3
        main();
 8e2:	4b0e      	ldr	r3, [pc, #56]	; (91c <Reset_Handler+0xe0>)
 8e4:	4798      	blx	r3
 8e6:	e7fe      	b.n	8e6 <Reset_Handler+0xaa>
 8e8:	00000bd4 	.word	0x00000bd4
 8ec:	20000000 	.word	0x20000000
 8f0:	2000000c 	.word	0x2000000c
 8f4:	20000004 	.word	0x20000004
 8f8:	2000000c 	.word	0x2000000c
 8fc:	20000048 	.word	0x20000048
 900:	e000ed00 	.word	0xe000ed00
 904:	00000000 	.word	0x00000000
 908:	41007000 	.word	0x41007000
 90c:	41005000 	.word	0x41005000
 910:	41004800 	.word	0x41004800
 914:	41004000 	.word	0x41004000
 918:	00000b25 	.word	0x00000b25
 91c:	0000096d 	.word	0x0000096d

00000920 <configure_power_manager>:
			PM->APBAMASK.reg &= ~mask;
 920:	4b09      	ldr	r3, [pc, #36]	; (948 <configure_power_manager+0x28>)
 922:	699a      	ldr	r2, [r3, #24]
 924:	2179      	movs	r1, #121	; 0x79
 926:	438a      	bics	r2, r1
 928:	619a      	str	r2, [r3, #24]
			PM->APBBMASK.reg &= ~mask;
 92a:	69da      	ldr	r2, [r3, #28]
 92c:	393a      	subs	r1, #58	; 0x3a
 92e:	438a      	bics	r2, r1
 930:	61da      	str	r2, [r3, #28]
			PM->APBCMASK.reg &= ~mask;
 932:	6a1a      	ldr	r2, [r3, #32]
 934:	4905      	ldr	r1, [pc, #20]	; (94c <configure_power_manager+0x2c>)
 936:	400a      	ands	r2, r1
 938:	621a      	str	r2, [r3, #32]
			PM->APBASEL.reg = (uint32_t)divider;
 93a:	2202      	movs	r2, #2
 93c:	725a      	strb	r2, [r3, #9]
	PM->AHBMASK.reg &= ~ahb_mask;
 93e:	695a      	ldr	r2, [r3, #20]
 940:	216e      	movs	r1, #110	; 0x6e
 942:	438a      	bics	r2, r1
 944:	615a      	str	r2, [r3, #20]
				| PM_AHBMASK_HPB2 \
				| PM_AHBMASK_HPB0 \
				| PM_AHBMASK_NVMCTRL \ 
				*/
			));
}
 946:	4770      	bx	lr
 948:	40000400 	.word	0x40000400
 94c:	ffe80000 	.word	0xffe80000

00000950 <switch_gclkgen_to_peripherals>:
 * In ASF versions later than 3.19 this will be done automaticlay when system_clock_init() is caled
 * and this function should not be called again as it will only be waisting time.
 */
void switch_gclkgen_to_peripherals(void)
{
	for (int gclk_id = 1; gclk_id < MAX_GCLK_ID; gclk_id++) {
 950:	2301      	movs	r3, #1
		GCLK->CLKCTRL.reg = (gclk_id << GCLK_CLKCTRL_ID_Pos) | GCLK_CLKCTRL_GEN_GCLK7;
 952:	20e0      	movs	r0, #224	; 0xe0
 954:	00c0      	lsls	r0, r0, #3
 956:	4904      	ldr	r1, [pc, #16]	; (968 <switch_gclkgen_to_peripherals+0x18>)
 958:	0002      	movs	r2, r0
 95a:	431a      	orrs	r2, r3
 95c:	b292      	uxth	r2, r2
 95e:	804a      	strh	r2, [r1, #2]
	for (int gclk_id = 1; gclk_id < MAX_GCLK_ID; gclk_id++) {
 960:	3301      	adds	r3, #1
 962:	2b25      	cmp	r3, #37	; 0x25
 964:	d1f8      	bne.n	958 <switch_gclkgen_to_peripherals+0x8>
	}
}
 966:	4770      	bx	lr
 968:	40000c00 	.word	0x40000c00

0000096c <main>:
#define LED0_ACTIVE               true
#define LED0_INACTIVE             !LED0_ACTIVE
#define LED0_GPIO                 LED0_PIN

int main (void)
{
 96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 96e:	b083      	sub	sp, #12
	system_init();
 970:	4b1b      	ldr	r3, [pc, #108]	; (9e0 <main+0x74>)
 972:	4798      	blx	r3
	delay_init();
 974:	4b1b      	ldr	r3, [pc, #108]	; (9e4 <main+0x78>)
 976:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 978:	a901      	add	r1, sp, #4
 97a:	2301      	movs	r3, #1
 97c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
 97e:	2200      	movs	r2, #0
 980:	708a      	strb	r2, [r1, #2]

	struct port_config pin;
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
 982:	700b      	strb	r3, [r1, #0]

	port_pin_set_config(LED0_PIN, &pin);
 984:	2009      	movs	r0, #9
 986:	4b18      	ldr	r3, [pc, #96]	; (9e8 <main+0x7c>)
 988:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
 98a:	2280      	movs	r2, #128	; 0x80
 98c:	0092      	lsls	r2, r2, #2
 98e:	4b17      	ldr	r3, [pc, #92]	; (9ec <main+0x80>)
 990:	615a      	str	r2, [r3, #20]
 992:	2405      	movs	r4, #5
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
 994:	001e      	movs	r6, r3
 996:	0017      	movs	r7, r2
	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

//	while (true) {
		for (int i = 0; i < 5; i++) {
			port_pin_toggle_output_level(LED0_PIN);
			delay_s(2);
 998:	4d15      	ldr	r5, [pc, #84]	; (9f0 <main+0x84>)
 99a:	61f7      	str	r7, [r6, #28]
 99c:	20fa      	movs	r0, #250	; 0xfa
 99e:	00c0      	lsls	r0, r0, #3
 9a0:	47a8      	blx	r5
 9a2:	3c01      	subs	r4, #1
		for (int i = 0; i < 5; i++) {
 9a4:	2c00      	cmp	r4, #0
 9a6:	d1f8      	bne.n	99a <main+0x2e>
			//port_pin_toggle_output_level(LED0_PIN);
			//delay_cycles(100);
		//}
//	}	
	
	switch_gclkgen_to_peripherals();
 9a8:	4b12      	ldr	r3, [pc, #72]	; (9f4 <main+0x88>)
 9aa:	4798      	blx	r3
	SYSCTRL->BOD33.reg = 0;
 9ac:	2200      	movs	r2, #0
 9ae:	4b12      	ldr	r3, [pc, #72]	; (9f8 <main+0x8c>)
 9b0:	635a      	str	r2, [r3, #52]	; 0x34

	turn_off_bod33();
	
	configure_power_manager();
 9b2:	4b12      	ldr	r3, [pc, #72]	; (9fc <main+0x90>)
 9b4:	4798      	blx	r3
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
 9b6:	4b12      	ldr	r3, [pc, #72]	; (a00 <main+0x94>)
 9b8:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
 9ba:	051b      	lsls	r3, r3, #20
 9bc:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
 9be:	2b02      	cmp	r3, #2
 9c0:	d805      	bhi.n	9ce <main+0x62>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
 9c2:	4a10      	ldr	r2, [pc, #64]	; (a04 <main+0x98>)
 9c4:	6851      	ldr	r1, [r2, #4]
 9c6:	23c0      	movs	r3, #192	; 0xc0
 9c8:	009b      	lsls	r3, r3, #2
 9ca:	430b      	orrs	r3, r1
 9cc:	6053      	str	r3, [r2, #4]
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
 9ce:	4a0e      	ldr	r2, [pc, #56]	; (a08 <main+0x9c>)
 9d0:	6913      	ldr	r3, [r2, #16]
 9d2:	2104      	movs	r1, #4
 9d4:	430b      	orrs	r3, r1
 9d6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb");
 9d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
 9dc:	bf30      	wfi
 9de:	e7fe      	b.n	9de <main+0x72>
 9e0:	0000080d 	.word	0x0000080d
 9e4:	00000119 	.word	0x00000119
 9e8:	000001f5 	.word	0x000001f5
 9ec:	41004400 	.word	0x41004400
 9f0:	00000159 	.word	0x00000159
 9f4:	00000951 	.word	0x00000951
 9f8:	40000800 	.word	0x40000800
 9fc:	00000921 	.word	0x00000921
 a00:	41002000 	.word	0x41002000
 a04:	41004000 	.word	0x41004000
 a08:	e000ed00 	.word	0xe000ed00

00000a0c <__udivsi3>:
 a0c:	2200      	movs	r2, #0
 a0e:	0843      	lsrs	r3, r0, #1
 a10:	428b      	cmp	r3, r1
 a12:	d374      	bcc.n	afe <__udivsi3+0xf2>
 a14:	0903      	lsrs	r3, r0, #4
 a16:	428b      	cmp	r3, r1
 a18:	d35f      	bcc.n	ada <__udivsi3+0xce>
 a1a:	0a03      	lsrs	r3, r0, #8
 a1c:	428b      	cmp	r3, r1
 a1e:	d344      	bcc.n	aaa <__udivsi3+0x9e>
 a20:	0b03      	lsrs	r3, r0, #12
 a22:	428b      	cmp	r3, r1
 a24:	d328      	bcc.n	a78 <__udivsi3+0x6c>
 a26:	0c03      	lsrs	r3, r0, #16
 a28:	428b      	cmp	r3, r1
 a2a:	d30d      	bcc.n	a48 <__udivsi3+0x3c>
 a2c:	22ff      	movs	r2, #255	; 0xff
 a2e:	0209      	lsls	r1, r1, #8
 a30:	ba12      	rev	r2, r2
 a32:	0c03      	lsrs	r3, r0, #16
 a34:	428b      	cmp	r3, r1
 a36:	d302      	bcc.n	a3e <__udivsi3+0x32>
 a38:	1212      	asrs	r2, r2, #8
 a3a:	0209      	lsls	r1, r1, #8
 a3c:	d065      	beq.n	b0a <__udivsi3+0xfe>
 a3e:	0b03      	lsrs	r3, r0, #12
 a40:	428b      	cmp	r3, r1
 a42:	d319      	bcc.n	a78 <__udivsi3+0x6c>
 a44:	e000      	b.n	a48 <__udivsi3+0x3c>
 a46:	0a09      	lsrs	r1, r1, #8
 a48:	0bc3      	lsrs	r3, r0, #15
 a4a:	428b      	cmp	r3, r1
 a4c:	d301      	bcc.n	a52 <__udivsi3+0x46>
 a4e:	03cb      	lsls	r3, r1, #15
 a50:	1ac0      	subs	r0, r0, r3
 a52:	4152      	adcs	r2, r2
 a54:	0b83      	lsrs	r3, r0, #14
 a56:	428b      	cmp	r3, r1
 a58:	d301      	bcc.n	a5e <__udivsi3+0x52>
 a5a:	038b      	lsls	r3, r1, #14
 a5c:	1ac0      	subs	r0, r0, r3
 a5e:	4152      	adcs	r2, r2
 a60:	0b43      	lsrs	r3, r0, #13
 a62:	428b      	cmp	r3, r1
 a64:	d301      	bcc.n	a6a <__udivsi3+0x5e>
 a66:	034b      	lsls	r3, r1, #13
 a68:	1ac0      	subs	r0, r0, r3
 a6a:	4152      	adcs	r2, r2
 a6c:	0b03      	lsrs	r3, r0, #12
 a6e:	428b      	cmp	r3, r1
 a70:	d301      	bcc.n	a76 <__udivsi3+0x6a>
 a72:	030b      	lsls	r3, r1, #12
 a74:	1ac0      	subs	r0, r0, r3
 a76:	4152      	adcs	r2, r2
 a78:	0ac3      	lsrs	r3, r0, #11
 a7a:	428b      	cmp	r3, r1
 a7c:	d301      	bcc.n	a82 <__udivsi3+0x76>
 a7e:	02cb      	lsls	r3, r1, #11
 a80:	1ac0      	subs	r0, r0, r3
 a82:	4152      	adcs	r2, r2
 a84:	0a83      	lsrs	r3, r0, #10
 a86:	428b      	cmp	r3, r1
 a88:	d301      	bcc.n	a8e <__udivsi3+0x82>
 a8a:	028b      	lsls	r3, r1, #10
 a8c:	1ac0      	subs	r0, r0, r3
 a8e:	4152      	adcs	r2, r2
 a90:	0a43      	lsrs	r3, r0, #9
 a92:	428b      	cmp	r3, r1
 a94:	d301      	bcc.n	a9a <__udivsi3+0x8e>
 a96:	024b      	lsls	r3, r1, #9
 a98:	1ac0      	subs	r0, r0, r3
 a9a:	4152      	adcs	r2, r2
 a9c:	0a03      	lsrs	r3, r0, #8
 a9e:	428b      	cmp	r3, r1
 aa0:	d301      	bcc.n	aa6 <__udivsi3+0x9a>
 aa2:	020b      	lsls	r3, r1, #8
 aa4:	1ac0      	subs	r0, r0, r3
 aa6:	4152      	adcs	r2, r2
 aa8:	d2cd      	bcs.n	a46 <__udivsi3+0x3a>
 aaa:	09c3      	lsrs	r3, r0, #7
 aac:	428b      	cmp	r3, r1
 aae:	d301      	bcc.n	ab4 <__udivsi3+0xa8>
 ab0:	01cb      	lsls	r3, r1, #7
 ab2:	1ac0      	subs	r0, r0, r3
 ab4:	4152      	adcs	r2, r2
 ab6:	0983      	lsrs	r3, r0, #6
 ab8:	428b      	cmp	r3, r1
 aba:	d301      	bcc.n	ac0 <__udivsi3+0xb4>
 abc:	018b      	lsls	r3, r1, #6
 abe:	1ac0      	subs	r0, r0, r3
 ac0:	4152      	adcs	r2, r2
 ac2:	0943      	lsrs	r3, r0, #5
 ac4:	428b      	cmp	r3, r1
 ac6:	d301      	bcc.n	acc <__udivsi3+0xc0>
 ac8:	014b      	lsls	r3, r1, #5
 aca:	1ac0      	subs	r0, r0, r3
 acc:	4152      	adcs	r2, r2
 ace:	0903      	lsrs	r3, r0, #4
 ad0:	428b      	cmp	r3, r1
 ad2:	d301      	bcc.n	ad8 <__udivsi3+0xcc>
 ad4:	010b      	lsls	r3, r1, #4
 ad6:	1ac0      	subs	r0, r0, r3
 ad8:	4152      	adcs	r2, r2
 ada:	08c3      	lsrs	r3, r0, #3
 adc:	428b      	cmp	r3, r1
 ade:	d301      	bcc.n	ae4 <__udivsi3+0xd8>
 ae0:	00cb      	lsls	r3, r1, #3
 ae2:	1ac0      	subs	r0, r0, r3
 ae4:	4152      	adcs	r2, r2
 ae6:	0883      	lsrs	r3, r0, #2
 ae8:	428b      	cmp	r3, r1
 aea:	d301      	bcc.n	af0 <__udivsi3+0xe4>
 aec:	008b      	lsls	r3, r1, #2
 aee:	1ac0      	subs	r0, r0, r3
 af0:	4152      	adcs	r2, r2
 af2:	0843      	lsrs	r3, r0, #1
 af4:	428b      	cmp	r3, r1
 af6:	d301      	bcc.n	afc <__udivsi3+0xf0>
 af8:	004b      	lsls	r3, r1, #1
 afa:	1ac0      	subs	r0, r0, r3
 afc:	4152      	adcs	r2, r2
 afe:	1a41      	subs	r1, r0, r1
 b00:	d200      	bcs.n	b04 <__udivsi3+0xf8>
 b02:	4601      	mov	r1, r0
 b04:	4152      	adcs	r2, r2
 b06:	4610      	mov	r0, r2
 b08:	4770      	bx	lr
 b0a:	e7ff      	b.n	b0c <__udivsi3+0x100>
 b0c:	b501      	push	{r0, lr}
 b0e:	2000      	movs	r0, #0
 b10:	f000 f806 	bl	b20 <__aeabi_idiv0>
 b14:	bd02      	pop	{r1, pc}
 b16:	46c0      	nop			; (mov r8, r8)

00000b18 <__aeabi_uidivmod>:
 b18:	2900      	cmp	r1, #0
 b1a:	d0f7      	beq.n	b0c <__udivsi3+0x100>
 b1c:	e776      	b.n	a0c <__udivsi3>
 b1e:	4770      	bx	lr

00000b20 <__aeabi_idiv0>:
 b20:	4770      	bx	lr
 b22:	46c0      	nop			; (mov r8, r8)

00000b24 <__libc_init_array>:
 b24:	b570      	push	{r4, r5, r6, lr}
 b26:	2600      	movs	r6, #0
 b28:	4d0c      	ldr	r5, [pc, #48]	; (b5c <__libc_init_array+0x38>)
 b2a:	4c0d      	ldr	r4, [pc, #52]	; (b60 <__libc_init_array+0x3c>)
 b2c:	1b64      	subs	r4, r4, r5
 b2e:	10a4      	asrs	r4, r4, #2
 b30:	42a6      	cmp	r6, r4
 b32:	d109      	bne.n	b48 <__libc_init_array+0x24>
 b34:	2600      	movs	r6, #0
 b36:	f000 f83d 	bl	bb4 <_init>
 b3a:	4d0a      	ldr	r5, [pc, #40]	; (b64 <__libc_init_array+0x40>)
 b3c:	4c0a      	ldr	r4, [pc, #40]	; (b68 <__libc_init_array+0x44>)
 b3e:	1b64      	subs	r4, r4, r5
 b40:	10a4      	asrs	r4, r4, #2
 b42:	42a6      	cmp	r6, r4
 b44:	d105      	bne.n	b52 <__libc_init_array+0x2e>
 b46:	bd70      	pop	{r4, r5, r6, pc}
 b48:	00b3      	lsls	r3, r6, #2
 b4a:	58eb      	ldr	r3, [r5, r3]
 b4c:	4798      	blx	r3
 b4e:	3601      	adds	r6, #1
 b50:	e7ee      	b.n	b30 <__libc_init_array+0xc>
 b52:	00b3      	lsls	r3, r6, #2
 b54:	58eb      	ldr	r3, [r5, r3]
 b56:	4798      	blx	r3
 b58:	3601      	adds	r6, #1
 b5a:	e7f2      	b.n	b42 <__libc_init_array+0x1e>
 b5c:	00000bc0 	.word	0x00000bc0
 b60:	00000bc0 	.word	0x00000bc0
 b64:	00000bc0 	.word	0x00000bc0
 b68:	00000bc4 	.word	0x00000bc4
 b6c:	0000022a 	.word	0x0000022a
 b70:	00000226 	.word	0x00000226
 b74:	00000226 	.word	0x00000226
 b78:	00000288 	.word	0x00000288
 b7c:	00000288 	.word	0x00000288
 b80:	0000023e 	.word	0x0000023e
 b84:	00000230 	.word	0x00000230
 b88:	00000244 	.word	0x00000244
 b8c:	00000276 	.word	0x00000276
 b90:	0000038c 	.word	0x0000038c
 b94:	0000036c 	.word	0x0000036c
 b98:	0000036c 	.word	0x0000036c
 b9c:	000003f8 	.word	0x000003f8
 ba0:	0000037e 	.word	0x0000037e
 ba4:	0000039a 	.word	0x0000039a
 ba8:	00000370 	.word	0x00000370
 bac:	000003a8 	.word	0x000003a8
 bb0:	000003e8 	.word	0x000003e8

00000bb4 <_init>:
 bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 bb6:	46c0      	nop			; (mov r8, r8)
 bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 bba:	bc08      	pop	{r3}
 bbc:	469e      	mov	lr, r3
 bbe:	4770      	bx	lr

00000bc0 <__init_array_start>:
 bc0:	000000dd 	.word	0x000000dd

00000bc4 <_fini>:
 bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 bc6:	46c0      	nop			; (mov r8, r8)
 bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 bca:	bc08      	pop	{r3}
 bcc:	469e      	mov	lr, r3
 bce:	4770      	bx	lr

00000bd0 <__fini_array_start>:
 bd0:	000000b5 	.word	0x000000b5
